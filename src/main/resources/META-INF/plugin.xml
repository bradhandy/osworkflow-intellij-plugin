<idea-plugin>
  <id>net.jackofalltrades.workflow</id>
  <name>OS Workflow Support</name>
  <version></version>
  <vendor email="brad.handy@gmail.com"
      url="https://bitbucket.org/bhandy/os-workflow-intellij-plugin">
    Brad Handy
  </vendor>

  <idea-version since-build="" until-build="" />

  <description><![CDATA[ Support for working with OS Workflow configuration files. ]]></description>

  <change-notes>
    <![CDATA[
        <ul>
            <li> Version 3.7 </li>
            <ul>
                <li> Support for Intellij 2020.1 </li>
            </ul>
            <li> Version 3.6 </li>
            <ul>
                <li> Support for IntelliJ 2019.1 </li>
            </ul>
            <li> Version 3.5 </li>
            <ul>
                <li> Support for IntelliJ 2018.3 </li>
            </ul>
            <li> Version 3.4 </li>
            <ul>
                <li> Support for IntelliJ 2018.2 </li>
            </ul>
            <li> Version 3.3 </li>
            <ul>
                <li> Support for IntelliJ 2018.1 EAP </li>
            </ul>
        </ul>
        ]]>
  </change-notes>

  <depends>com.intellij.modules.platform</depends>
  <depends>com.intellij.modules.xml</depends>
  <depends>com.intellij.modules.java</depends>

  <!-- optionally depends on the Spring plugin for the Spring API. -->
  <depends optional="true" config-file="spring-integration.xml">com.intellij.spring</depends>

  <extensionPoints>

    <!--
      defines an extension point usable by this plugin, or others, to provide custom value converters for
      resolving the values of "arg" and "meta" tags.  This is useful for resolving Spring beans, or other constructs
      in code which could be passed as a String identified reference.
      -->
    <extensionPoint
        interface="com.intellij.util.xml.converters.values.GenericDomValueConvertersRegistry$Provider"
        name="valueConverter" />

  </extensionPoints>

  <extensions defaultExtensionNs="com.intellij">

    <!-- defines a service to handle the valueConverter extension point. -->
    <applicationService
        serviceImplementation="net.jackofalltrades.workflow.model.converter.WorkflowValueConverterRegistry" />

    <!-- handles the new structure view for the OS Workflow files. -->
    <xmlStructureViewBuilderProvider
        implementation="net.jackofalltrades.workflow.model.structure.WorkflowStructureViewBuilderProvider"
        order="first" />

    <!-- inspections for the OS Workflow configuration files. -->
    <inspectionToolProvider
        implementation="net.jackofalltrades.workflow.model.inspection.WorkflowInspectionToolProvider" />
    <localInspection shortName="UnnecessaryConditions" groupName="OS Workflow"
        displayName="Unnecessary conditions elements"
        implementationClass="net.jackofalltrades.workflow.model.inspection.UnnecessaryConditionHolderInspection" />
    <localInspection shortName="UnusedStep" groupName="OS Workflow"
        displayName="Unused Step"
        implementationClass="net.jackofalltrades.workflow.model.inspection.UnusedStepInspection" />
    <localInspection shortName="UseOfPostFunctions" groupName="OS Workflow"
        displayName="Inconsistent workflow state"
        implementationClass="net.jackofalltrades.workflow.model.inspection.UseOfPostFunctionsInspection" />

    <!-- configuration for parsing the OS Workflow files using the DOM framework. -->
    <elementDescriptionProvider
        implementation="net.jackofalltrades.workflow.model.presentation.WorkflowElementDescriptionProvider" />
    <dom.fileDescription
        implementation="net.jackofalltrades.workflow.model.xml.WorkflowDomFileDescription" />
    <dom.implementation interfaceClass="net.jackofalltrades.workflow.model.xml.FunctionProvider"
        implementationClass="net.jackofalltrades.workflow.model.impl.xml.FunctionProviderImpl" />
    <dom.implementation interfaceClass="net.jackofalltrades.workflow.model.xml.SingleCondition"
        implementationClass="net.jackofalltrades.workflow.model.impl.xml.SingleConditionImpl" />
    <dom.implementation interfaceClass="net.jackofalltrades.workflow.model.xml.Action"
        implementationClass="net.jackofalltrades.workflow.model.impl.xml.ActionImpl" />
    <dom.implementation interfaceClass="net.jackofalltrades.workflow.model.xml.ConditionalResult"
        implementationClass="net.jackofalltrades.workflow.model.impl.xml.ConditionalResultImpl" />
    <dom.implementation interfaceClass="net.jackofalltrades.workflow.model.xml.ConditionHolder"
        implementationClass="net.jackofalltrades.workflow.model.impl.xml.ConditionHolderImpl" />
    <dom.implementation interfaceClass="net.jackofalltrades.workflow.model.xml.Result"
        implementationClass="net.jackofalltrades.workflow.model.impl.xml.ResultImpl" />
    <dom.implementation interfaceClass="net.jackofalltrades.workflow.model.xml.Step"
        implementationClass="net.jackofalltrades.workflow.model.impl.xml.StepImpl" />
    <dom.implementation interfaceClass="net.jackofalltrades.workflow.model.xml.WorkflowValue"
        implementationClass="net.jackofalltrades.workflow.model.impl.xml.WorkflowValueImpl" />

  </extensions>
</idea-plugin>